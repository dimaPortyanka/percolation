{"version":3,"sources":["PercolationSimulation/PercolationSimulation.module.css","UF/UF.js","PercolationModel/PercolationModel.js","PercolationSimulation/utils/callOneByOne.js","PercolationSimulation/PercolationSimulation.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","UF","n","Error","this","arr","Array","fill","map","_","i","j","rootI","find","rootJ","root","DIRECTIONS","row","col","PercolationModel","rowsAm","colsAm","uf","percolateRoot","forEach","union","grid","rowD","colD","join","a","b","isOpen","aI","toIndex","bI","rootA","rootB","newRoot","callOneByOne","cbs","Promise","resolve","reject","cb","then","length","catch","PercolationSimulation","useState","width","height","setState","model","setGrid","randomCellAm","setRandomCellAm","useEffect","onInputChange","useCallback","event","target","name","parseInt","value","open","rowNum","colNum","rowI","_cell","cellI","onCellClick","getAttribute","split","strNum","onInputRandomCellAm","reset","randomFill","setTimeout","Math","floor","random","className","styles","controls","htmlFor","type","onChange","onClick","opened","clsx","cell","openCell","percolates","cellButton","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0871b3cc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"PercolationSimulation_grid__aK6iY\",\"row\":\"PercolationSimulation_row__24Wwf\",\"cell\":\"PercolationSimulation_cell__2erQ9\",\"openCell\":\"PercolationSimulation_openCell__1qhE-\",\"percolates\":\"PercolationSimulation_percolates__2qMFD\",\"cellButton\":\"PercolationSimulation_cellButton__2nZIT\"};","class UF {\n    constructor(n) {\n        if (!n) {\n            throw new Error('n should be a number bigger then 0')\n        }\n\n        this.arr = new Array(n).fill(0).map((_, i) => {\n            return i\n        })\n    }\n\n    union(i, j) {\n        const rootI = this.find(i)\n        const rootJ = this.find(j)\n\n        this.arr = this.arr.map((root) => {\n            if (root === rootJ) {\n                return rootI\n            }\n\n            return root\n        })\n\n        return rootI\n    }\n\n    find(i) {\n        const root = this.arr[i]\n\n        return root\n    }\n}\n\nexport default UF\n","import UF from '../UF'\n\nconst DIRECTIONS = [\n    {\n        row: 0,\n        col: -1,\n    },\n    {\n        row: 0,\n        col: 1,\n    },\n    {\n        row: 1,\n        col: 0,\n    },\n    {\n        row: -1,\n        col: 0,\n    },\n]\n\nclass PercolationModel {\n    constructor(rowsAm, colsAm) {\n        this.rowsAm = rowsAm\n        this.colsAm = colsAm\n        this.uf = new UF((rowsAm + 1) * colsAm)\n\n        this.percolateRoot = -1\n        new Array(colsAm).fill(0).forEach((_, i) => {\n            this.percolateRoot = this.uf.union(i, 0)\n        })\n\n        this.grid = new Array(rowsAm).fill(0).map(() => {\n            return new Array(colsAm).fill(false)\n        })\n    }\n\n    open(row, col) {\n        this.grid[row][col] = true\n\n        DIRECTIONS.forEach(({\n            row: rowD,\n            col: colD,\n        }) => {\n            this.join(\n                {\n                    row,\n                    col,\n                },\n                {\n                    row: row + rowD,\n                    col: col + colD,\n                },\n            )\n        })\n    }\n\n    toIndex(\n        row,\n        col,\n    ) {\n        return (row + 1) * this.colsAm + col\n    }\n\n    isOpen(row, col) {\n        if (col < 0 || col >= this.colsAm) {\n            return false\n        }\n\n        if (row === -1) {\n            return true\n        }\n\n        if (row < 0 || row >= this.rowsAm) {\n            return false\n        }\n\n        return this.grid[row][col]\n    }\n\n    join(a, b) {\n        if (!this.isOpen(a.row, a.col) || !this.isOpen(b.row, b.col)) {\n            return -1\n        }\n\n        const aI = this.toIndex(a.row, a.col)\n        const bI = this.toIndex(b.row, b.col)\n\n        const rootA = this.uf.find(aI)\n        const rootB = this.uf.find(bI)\n\n        const newRoot = this.uf.union(aI, bI)\n\n        if (rootA === this.percolateRoot || rootB === this.percolateRoot) {\n            this.percolateRoot = newRoot\n        }\n\n        return newRoot\n    }\n\n    percolates(row, col) {\n        return this.uf.find(\n            this.toIndex(\n                row,\n                col,\n            ),\n        ) === this.percolateRoot\n    }\n}\n\nexport default PercolationModel\n","const callOneByOne = (...cbs) => {\n    let i = 0\n\n    return new Promise((resolve, reject) => {\n        cbs.forEach((cb) => {\n            cb().then(() => {\n                i += 1\n\n                if (i === cbs.length) {\n                    resolve()\n                }\n            }).catch(() => {\n                reject()\n            })\n        })\n    })\n}\n\nexport default callOneByOne\n","import React, {\n    useState,\n    useEffect,\n    useCallback,\n} from 'react'\nimport clsx from 'clsx'\n\nimport PercolationModel from '../PercolationModel'\n\nimport callOneByOne from './utils/callOneByOne'\n\nimport styles from './PercolationSimulation.module.css'\n\nconst PercolationSimulation = () => {\n    const [\n        {\n            width,\n            height,\n        },\n        setState,\n    ] = useState({\n        width: 40,\n        height: 40,\n    })\n\n    const [\n        {\n            grid,\n            model,\n        },\n        setGrid,\n    ] = useState({\n        grid: [],\n        model: null,\n    })\n\n    const [\n        randomCellAm,\n        setRandomCellAm,\n    ] = useState(150)\n\n    useEffect(() => {\n        setGrid({\n            grid: new Array(height).fill(0).map(() => {\n                return new Array(width).fill(false)\n            }),\n            model: new PercolationModel(height, width),\n        })\n    }, [\n        width,\n        height,\n    ])\n\n    const onInputChange = useCallback((event) => {\n        setState({\n            width,\n            height,\n            [event.target.name]: parseInt(event.target.value, 10) || 1,\n        })\n    }, [\n        width,\n        height,\n    ])\n\n    const open = useCallback((rowNum, colNum) => {\n        model.open(rowNum, colNum)\n\n        setGrid({\n            model,\n            grid: grid.map((row, rowI) => {\n                return row.map((_cell, cellI) => {\n                    return model.grid[rowI][cellI]\n                })\n            }),\n        })\n    }, [\n        grid,\n        model,\n    ])\n\n    const onCellClick = useCallback((event) => {\n        const [\n            rowNum,\n            colNum,\n        ] = event.target.getAttribute('data-cell')\n            .split('-')\n            .map((strNum) => {\n                return parseInt(strNum, 10)\n            })\n\n        open(rowNum, colNum)\n    }, [open])\n\n    const onInputRandomCellAm = useCallback((event) => {\n        setRandomCellAm(parseInt(event.target.value, 10))\n    }, [])\n\n    const reset = useCallback(() => {\n        setGrid({\n            grid: new Array(height).fill(0).map(() => {\n                return new Array(width).fill(false)\n            }),\n            model: new PercolationModel(height, width),\n        })\n    }, [\n        width,\n        height,\n    ])\n\n    const randomFill = useCallback(() => {\n        callOneByOne(\n            ...new Array(randomCellAm).fill(0).map(() => {\n                return () => {\n                    return new Promise((resolve) => {\n                        setTimeout(() => {\n                            open(\n                                Math.floor(\n                                    Math.random() * height,\n                                ),\n                                Math.floor(\n                                    Math.random() * width,\n                                ),\n                            )\n                            resolve()\n                        }, 200)\n                    })\n                }\n            }),\n        )\n    }, [\n        open,\n        width,\n        height,\n        randomCellAm,\n    ])\n\n    return (\n        <div>\n            <div className={styles.controls}>\n                <div>\n                    <label htmlFor=\"width\">\n                        Width:\n                        <input\n                            type=\"number\"\n                            name=\"width\"\n                            value={width}\n                            onChange={onInputChange}\n                        />\n                    </label>\n                    <label htmlFor=\"height\">\n                        Height:\n                        <input\n                            type=\"number\"\n                            name=\"height\"\n                            value={height}\n                            onChange={onInputChange}\n                        />\n                    </label>\n                </div>\n                <div>\n                    <input\n                        type=\"number\"\n                        name=\"randomCellAm\"\n                        value={randomCellAm}\n                        onChange={onInputRandomCellAm}\n                    />\n                    <button\n                        type=\"button\"\n                        onClick={randomFill}\n                    >\n                        random\n                    </button>\n                </div>\n            </div>\n            <div>\n                <button\n                    type=\"button\"\n                    onClick={reset}\n                >\n                    reset\n                </button>\n            </div>\n            <div>\n                <div className={styles.grid}>\n                    {grid.map((row, i) => {\n                        return (\n                            <div className={styles.row}>\n                                {row.map((opened, j) => {\n                                    return (\n                                        <div\n                                            className={clsx(\n                                                styles.cell,\n                                                opened\n                                                    && styles.openCell,\n                                                opened\n                                                    && model.percolates(i, j)\n                                                    && styles.percolates,\n                                            )}\n                                        >\n                                            <button\n                                                className={\n                                                    clsx(styles.cellButton)\n                                                }\n                                                type=\"button\"\n                                                onClick={onCellClick}\n                                                data-cell={`${i}-${j}`}\n                                            >\n                                                open cell\n                                                {' '}\n                                                {i}\n                                                {' '}\n                                                {j}\n                                            </button>\n                                        </div>\n                                    )\n                                })}\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default PercolationSimulation\n","import React from 'react'\n\nimport PercolationSimulation from './PercolationSimulation'\n\nimport './App.css'\n\nfunction App() {\n    return (\n        <PercolationSimulation />\n    )\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({\n            getCLS, getFID, getFCP, getLCP, getTTFB,\n        }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n\nreportWebVitals()\n"],"sourceRoot":""}